const hre = require("hardhat");
// from: https://github.com/MrToph/replaying-ethereum-hacks/blob/master/test/utils/fork.ts
const forkFrom = async (blockNumber) => {  
    await hre.network.provider.request({
      method: "hardhat_reset",
      params: [
        {
          forking: {
            jsonRpcUrl: hre.config.networks.hardhat.forking.url,
            blockNumber: blockNumber,
          },
        },
      ],
    });
};

const addresses = {
    digg: "0x798D1bE841a82a273720CE31c822C61a67a601C3",
    weth: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    wbtc: "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
    diggWethPair: "0xf41E354EB138B328d56957B36B7F814826708724",
    sushiMaker: "0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50",
    exploiter: "0x51841D9AFe10fE55571bDB8f4Af1060415003528",
    IUniswapV2Router02: "0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f",
    IUniswapV2Factory: "0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac",
}

const impersonate = async function getImpersonatedSigner(address) {
    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [address]
    });
    return ethers.provider.getSigner(address);
}

module.exports = [addresses, forkFrom, impersonate];